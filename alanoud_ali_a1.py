# -*- coding: utf-8 -*-
"""Alanoud_Ali A1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjTst72Z3xFaYMbjENIkQoVaQX1HMM0U
"""

from enum import Enum

#enum for reservation status
class ReservationStatus(Enum):
  CONFIRMED = "confirmed"
  CANCELLED = "cancelled"
  PENDING = "pending"


class Person:
  def __init__(self, first, last):
    """initializes a person object with fist and last name"""
    self.firstname = first
    self.lastname = last

  def display_name(self):
    """returns the full nane of the person"""
    return f"{self.firstname} {self.lastname}"

class Guest(Person):
  def __init__(self, first, last, email, phone):
    """initializes a guest object, extending a person with additional attributes"""
    super().__init__(first, last) #call to supper class constructor
    self.email = email  #guest email address
    self.phone = phone  #guest phone number

  def display_details(self):
    """retursn a formated string with guest details"""
    return f"Guest: {self.display_name()}, Email:{self.email}, Phone:{self.phone}"

class Room:
  def __init__(self, room_number, room_type, price_per_night, avaliability=True):
    """initializes a room object with details about the room"""
    self.room_number = room_number #unique room number
    self.room_type = room_type #type of room (single, double)
    self.price_per_night = price_per_night
    self.avaliability = avaliability #room avaliability status

  def check_avaliability(self):
    """returns wether the room is avaliable."""
    return self.avaliability

  def check_avaliability(self):
    """returns wether the room is avaliable."""
    return self.avaliability

class Reservation:
   def __init__(self, reservation_id, guest, room, check_in_date, check_out_date, status=ReservationStatus.PENDING):
        """Initializes the Reservation object with the reservation details."""
        self.reservation_id = reservation_id      # Unique identifier for the reservation
        self.guest = guest                        # Guest object associated with the reservation
        self.room = room                          # Room object associated with the reservation
        self.check_in_date = check_in_date        # Check-in date
        self.check_out_date = check_out_date      # Check-out date
        self.status = status                       # Reservation status

   def modify_reservation(self, new_check_in, new_check_out):
        """Modifies the reservation with new check-in and check-out dates."""
        self.check_in_date = new_check_in
        self.check_out_date = new_check_out
        # Additional logic to handle room availability can be added here

   def cancel_reservation(self):
        """Cancels the reservation by updating the status."""
        self.status = ReservationStatus.CANCELLED

   def display_details(self):
        """Returns a formatted string with reservation details."""
        return (f"Reservation ID: {self.reservation_id}, Guest: {self.guest.display_name()}, "
                f"Room: {self.room.room_number}, Check-in: {self.check_in_date}, "
                f"Check-out: {self.check_out_date}, Status: {self.status.value}")

# Example usage
guest1 = Guest("Alanoud", "Ali", "Alanoud@Gmail.com", "133-455-7860")
room1 = Room("101", "Deluxe", 150.00)
reservation1 = Reservation("R001", guest1, room1, "2024-10-10", "2024-10-15")

# Displaying guest details
print(guest1.display_details())  # Output: Guest: Alanoud Ali, Email: Alanoud@Gmail.com, Phone: 133-455-7860

# Displaying reservation details
print(reservation1.display_details())  # Output: Reservation details

# Modifying the reservation
reservation1.modify_reservation("2024-10-12", "2024-10-17")
print(reservation1.display_details())  # Output after modification

# Canceling the reservation
reservation1.cancel_reservation()
print(reservation1.display_details())  # Output with updated status